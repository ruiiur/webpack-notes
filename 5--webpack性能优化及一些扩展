5.1--Library的打包（自定义库的打包）
const path = require('path');
module.exports = {
  mode: 'production',
  entry: './src/index.js',
  output: {
     path: path.resolve(_dirname, 'dist'),
     filename: 'library.js',
     library: 'library', // 会在全局变量里面增加一个 library 的变量， 可以通过 script 标签引入库打包后的文件，然后通过 library 访问库里面的属性或方法
     libraryTarget: 'umd' // 是指全局变量挂载在哪里，如果是 umd 就和 library 的配置没很大关系，就是支持 Es module 或者 CommonJs 或者 AMD 等形式的引入，如果设置成 this ，则代表 library 设置的变量挂载在了 this 上，或者可以设置成 window ， 在 node 环境中，也可以设置成 global, 但是就不能支持Es module 或者 CommonJs 或者 AMD 等形式的引入啦，因为不是 umd 啦
  }
}

如果业务代码中引入了一个库 jquery， 自定义库中也引入了该库 jquery，为了防止重复打包，可以在自定义库中配置：
externals: {
   jquery: 'jQuery' // 这样配置，在其他项目中使用该自定义库时，引入 jquery 的名称，必须是 jQuery
}
这样在自定义库打包时就不会打包 jquery， 如果要在其他项目中正常使用自定义库， 需要在业务代码中引入 jquery 库

打开 npm 官网，注册一个账号，然后在命令行中执行 npm adduser 回车，然后输入用户名和密码， 再执行 
npm publish 把自己的库发布到 npm 上， 别人要是想使用这个库， 直接 npm install library 就可以啦，
每个库的名字在 npm 上都是不相同的



5.2--Progressive Web Application（PWA）
正常情况下，打包生成的dist文件夹，需要放到一个服务器上才能运行，假如本地起了一个 http-server 服务，该服务启动时，项目可以正常访问，但是关闭该服务，项目就无法访问啦。
如果要使服务关闭后，项目也可以访问，就需要用到 PWA 技术
需要安装一个插件 workbox-webpack-plugin
然后在 webpack.config.js 中配置：
const WorkboxWebpackPlugin = require('workbox-webpack-plugin');
plugins: [
  new WorkboxWebpackPlugin.CenerateSw({
    clientsClaim: true,
    skipWaiting: true
  })
]
然后，在业务代码中
if ('serviceWorker' in navigator) {
   window.addEventListener('load', () => {
      navigator.serviceWorker.register('/service-worker.js')
        .then(registration => {
           console.log('service-worker regifted');
        }).catch(error => {
           console.log('service-worker error');
        })
    })
}


5.3--TypeScript的打包配置
安装 ts，如果要使 webpack 能识别 .tsx 文件，需要配置 loader，这里用到了 ts-loader，也有其他可以支持的文件
如果要打包 ts 文件，还需要配置 tsconfig.json 文件，以下是一些常用配置
{
  "compilerOptions": {
    "outDir": "./dist", // 打包到哪个文件夹下，不配置也行，因为webpack.config.js 中已经配置过 output
    "module": "es6", // 在 ts 中引入 module 的方式是 ES module
    "target": "es5", // 打包生成的文件类型
    "allowJs": true, // 允许在 ts 语法中引入 js 模块
  }
}
ts 文件中引入外部库（一般库都是用 js 语法）的时候， 需要安装这个库类型的说明， 一般是 @type/库名



5.4--使用 WebpackDevServer 实现请求转发
devServer: {
  proxy: {  // 只在开发环境中生效
     '/react/api' : {
          target: 'http://www.dell-lee.com' // 目标域
          secure: false, // 可以对 https 生效
          pathRewrite: {
            'header.json': 'demo.json' // 如果是请求 header.json 就转发到 demo.json ,请求地址不变
          }
          changeOrigin: true, // 可以改变请求里的 origin 的选项， 使代理可以支持更多的访问
          headers: {
             // 可以自定义一些请求头的配置
          }
     }
  }
}



5.5--WebpackDevServer 解决单页面应用路由问题
devServer: { 
  historyApiFallback: true // 任何的404响应都可能被替代为 index.html , 这就使得在浏览器中切换路由时，每次都会请求到 index.html , 然后加载 index.js, 这样就能使路由正常加载。
// 只在开发环境中有效， 生产环境中需要后端对 nginx 等做一些配置
}



5.6/5.7--Eslint 在 webpack 中的配置
安装eslint eslint-loader
devServer: { 
  Overlay: true // 可以在页面上弹层提示错误 当出现编译器错误或警告时，在浏览器中显示全屏覆盖层
}
module: {
  rules: [{
     test: /\.js$/,
     exclude: /node_modules/, // 除了 node_modules 里面的js文件
     use: [{
        loader: 'eslint-loader', // eslint-loader 正常情况下要配置在后面，先执行
        options: {
           fix: true // 可以修复一些简单的问题
        },
        force: 'pre', // 即使 aslant-loader写在上面，也要强制先执行
     },'babel-loader']
  }]
}
一般在公司项目的开发中，不会在 webpack 中配置 eslint-loader ，因为会降低打包的速度



5.8--提升 webpack 打包技术的方法
1.跟上技术的迭代（Node，Npm，Yarn），尽可能使用较新的版本
2.在尽可能少的模块上应用 Loader（合理的使用 include 或者 exclude）
3.Plugin 尽可能精简并确保可靠（插件要合理的使用，尽量使用官方推荐的）
4.resolve 参数合理配置（不合理的配置会使打包变慢）
  resolve: {
    extensions: [".js", ".jsx"], // 当在文件中引入其他文件不加后缀时，会按照这个顺序验证并查找文件
    mainFiles:["index", "child"], // 当引入路径不加子路径时，会按照这个顺序验证并查找文件
    alias: { // 配置别名
      vue$: "vue/dist/vue.js",
      "@": resolve("src")
    }
  }
5.使用 DllPlugin 提高打包速度
  如果项目中引入了第三方模块，那么每次打包的时候 webpack 都会去 node_modules 中找对应的模块进行打包
  目标：使第三方模块只打包一次
  新建一个配置文件 webpack.dll.js, 对需要用到的第三方模块单独进行打包
  单独对第三方的文件打包，然后通过 library 设置一个全部变量，暴露出去，
  output: {
   filename: '[name].dll.js',
   path: path.resolve(__dirname, '../dll'),
   library: '[name]'
  }
  这种方法需要 <script> 标签引入，
  如何引入？如何把打包生成的文件挂载在 index.html 上？
  使用插件 add-asset-html-webpack-plugin 在 index.html 增加添加静态资源
  const AddAssetHtmlWebpackPlugin = require('add-asset-html-webpack-plugin');
  plugins: [
    new AddAssetHtmlWebpackPlugin({
      filepath: path.resolve(_dirname, '../dll/vendors.dll.js')
    })
  ]
  如何才能使在  webpack.dll.js 配置文件中打包的第三方模块不被再次打包？
  通过在  webpack.dll.js 文件中配置插件 webpack.DllPlugin 对暴露出去的文件进行分析，生成一个映射文件
   plugins: [
    new webpack.DllPlugin({
      name:'[name]',
      path: path.resolve(_dirname, '../dll/[name].manifest.json')
    })
  ]
  然后在通用配置文件中，也就是 webpack.config.js 中配置
  new webpack.DllReferencePlugin({
    manifest: path.resolve(_dirname, '../dll/[name].manifest.json')
  })
  这个插件会结合配置文件，结合生成的 vendors.dll.js 文件，结合引入的第三方模块进行分析，如果引入的第三方模块已经在 vendors.dll.js 中有啦，就不用再去 node_modules 中找对应的模块进行打包啦。
  当然，也可以把第三方模块打包进不同的文件中,为了在 plugin 中配置的简洁可复用，可以通过 fs 实现
  const fs = require('fs') // 引入 node 模块 fs
  const files = fs.readdirSync(path.resolve(__dirname, '../dll');
  files.forEach(file => {
     if(/.*\.dll.js/.test(file)) {
         plugins.push(new AddAssetHtmlWebpackPlugin({
            filepath: path.resolve(__dirname, '../dll', file)
         }))
     }
     if(/.*\.mainfest.json/.test(file)) {
         plugins.push(new webpack.DllReferencePlugin({
           manifest: path.resolve(__dirname, '../dll', file)
         }))
     }
  })
 
6.控制包文件的大小
7.thread-loader， parallel-webpack， happypack多进程打包
8.合理使用 sourceMap（sourceMap 越详细打包过程越慢， 所以要结婚项目的情况合理使用）
9.结合 stats 分析打包结果
10. 开发环境内存编译 （开发环境 webpackdevserver 打包不会生成 dist 目录， 它会把生成的文件放到内存中， 内存的读取肯定比硬盘快
11.开发环境无用插件剔除




5.9--多页面打包配置
多页面就会有多入口：
entry: {
  main: './src/inex.js',
  list: './src/list.js'
}
原理就是在 plugin 里面配置了多个 HtmlWebpackPlugin:
 plugins: [
  new HtmlWebpackPlugin({
    template: 'src/index.html', // 模版页
    filename: 'index.html',
    chunks: ['runtime', 'vendors', 'main'] // 引入生成的需要的模块
  })
  new webpack.DllPlugin({
    template: 'src/index.html', // 模版页
    filename:'list.html',
    chunks: ['runtime', 'vendors', 'main']
  })
]
当需要用到很多个 HtmlWebpackPlugin 时，我们可以对 plugin 进行优化，封装一个方法：
const makePlugins = (configs) => {
  const plugins = [
    new CleanWebapckPlugin(['dist'], {
      root: path.resolve(__dirname, '../')
    })
  ];
  Object.keys(configs.entry).forEach(item => {
    plugins.push(
      new HtmlWebpackPlugin({
        template: 'src/index.html',
        filename: `${item}.html`,
        chunks: ['runtime', 'vendors', item]
      })
    )
  })
  const files = fs.readdirSync(path.resolve(__dirname, '../dll');
  files.forEach(file => {
     if(/.*\.dll.js/.test(file)) {
         plugins.push(new AddAssetHtmlWebpackPlugin({
            filepath: path.resolve(__dirname, '../dll', file)
         }))
     }
     if(/.*\.mainfest.json/.test(file)) {
         plugins.push(new webpack.DllReferencePlugin({
           manifest: path.resolve(__dirname, '../dll', file)
         }))
     }
  })
  return plugins;
}

config.plugins = makePlugins(config);
