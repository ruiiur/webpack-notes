3.1--什么是Loader？
webpack 不能识别非 .js 结尾的模块，我们就可以使用 loader 让 webpack 可以识别
module: {
    rules: [
      {
        test:/\.(png|jpe?g|gif|svg)$/,
        use:[
          {
            loader: 'url-loader',
            options: {
              name: '[path][name].[ext]',
              outputPath: 'images', // 打包到 dist 文件夹下的 images 文件夹里面
              limit: 1024 // 启用或者禁用将文件转化成 base64，可以是 boolean，也可以是 number ｜ string ，如果图片大小超过此值，则不转化成base64
            }
          }
        ]
      },
      {
        test:/\.css$/,
        use:[
          "style-loader", // 使样式挂载到 style 标签上
          {
            loader: "css-loader",
            options: {
              importLoaders: 2   // 因为 loader 的执行是由下至上，由右到左的，
              // 假如一个 css 文件中又通过 import 引入了另一个 scss 文件，但是 loader 已经执行到 css-loader 啦
              // 要使这个被引入到 scss 文件还能执行 前两个 loader（postcss-loader，sass-loader），可以配置这个属性
              modules: true
            }
          }, // 使 webpack 能打包 css 文件
          "sass-loader"
          "postcss-loader" // 需要配置一个 postcss.config.js 文件，可以在里面配置一些插件，满足更多的 css 功能
        ]
      }
    ]
  }

postcss.config.js例子:
module.exports = {
  // parser: "postcss-js",
  // execute: true, // 启用 PostCSS 解析器支持 CSS-in-JS
  plugins: [
    require('autoprefixer')  // 可以自动添加一个 css 属性的厂商前缀，比如: -webkit-transform
  ]
}

import "./index.css" 这个引入 css 文件是全局的，可能会造成污染
我们可以模块化引入 css
import style from "./index.css",
然后 style.类名 去使用
当然需要在 loader 中配置 modules: true ，代表开启 css 的模块化打包

如何打包字体文件
{
  test: /\.(eot|svg|ttf|woff|woff2)(\?\S*)?$/,
  loader: 'file-loader'
}




3.2--使用 plugins 使打包更便捷
html-weback-plugin 插件 可以根据模版 html 文件，在每次打包之后生成一个 html 文件，并在 body 中使用 script 标签引入你所有 webpack 生成的 bundle

const HtmlWebpackPlugin = require('html-webpack-plugin');
plugins: [new HtmlWebpackPlugin({
  template: 'src/index.html'  // 传入一个模版页
})]
clean-webpack-plugin 插件 可以在每次打包之前清除 dist 文件
const CleanWebpackPlugin = require('clean-webpack-plugin');
plugins: [new CleanWebpackPlugin(['dist'])]

如果在打包的某一时刻想做某些事情，就可以去找对应的 plugin




3.3--entry 和 output 的基本配置
entry: {
  main: './src/index.js',
  sub: './src/index.js'
}
output: {
  filename: '[name].js',
  path: path.resolve(__dirname, 'dist'),
  publicPath: 'http://cdn.com.cn' // 可以在打包生成的文件前再配置一个公共的路径
}




3.4-- SourceMap 的配置
sourceMap 是一个映射关系，它知道打包后的文件实际上对应的是哪一个文件
cheap-module-eval-source-map 性能最好的
source-map 会生成.map文件
inline-source-map 可以不生成新的map文件，直接把映射关系映射到打包文件中
cheap-source-map 1.可以映射到具体的行，但是不用更细的映射，使打包速度更快
                 2.只能处理业务代码，而不能检测一些引入的module
cheap-module-source-map：这样既能处理业务代码，也能检测一些引入的module
eval-source-map:可以通过eval的方式对代码进行打包，可以提升打包速度

development devtool: 'cheap-module-eval-source-map'
Production devtool: 'cheap-module-source-map'




3.5--使用 webpackDevServer 提升开发效率
webpack -- watch：需要刷新浏览器
Webpack-dev-server 可以自动刷新页面，打包内容不会放在项目文件中，而是存在电脑内存中，可以提升速度
devServer里面的属性：
  open自动打开一个页面
  port设置端口
  proxy配置代理
  contentBase告诉服务器内容的来源
  hot:true (开启HMR（hot module replacement）
  hotOnly:true 即使HMR不生效，浏览器也不刷新

devServer: {
  contentBase: './dist',
  open: true,
  port: '3030'
}




3.6-- Hot Module Replacement
const webpack = require('webpack');
plugins: [new webpack.HotModuleReplacementPlugin()]
devServer: {
  contentBase: './dist',
  open: true,
  port: '3030',
  hot:true (开启HMR（hot module replacement）
  hotOnly:true 即使HMR不生效，浏览器也不刷新
}
HMR的好处：
修改css的时候不用刷新浏览器就自动更新样式
修改js方法通过module.hot.accept方法
例如:
if (module.hot) {
  module.hot.accept('./number', () => {
    number();
  })
}
Css-loader或者说vue-loader内部已经有这个逻辑啦，所以一般不需要自己配置




3.7--使用 babel 处理 es6 语法
Babel 编译器 可以把es6语法转成es5语法
@babel/parser 代码分析，解析出抽象语法树
@babel/traverse 可以对分析出的抽象语法树进行遍历
@babel/core babel 的核心库
@babel/preset-env preset-env 中包含了所以 es6 转 es5 的规则，可以把es6语法转成es5语法
@babel/polyfill 可以补充一些低版本可以支持的变量或函数，但是这样会使打包文件变大
配置：
module: {
  rules: [
    {
      test: /\.js$/,
      exclude: /node_modules/,
      loader: "babel-loader", // babel-loader 是 babel 和 webpack 沟通的桥梁
      options: {
        presets: ['@babel/preset-env']
      }
    }
  ]
}
需要增加配置，实现按需加载：
options: {
 presets: [['@babel/preset-env', {
   targets: {
     chrome: "67" // 如果是在 chrome 67 版本以上的浏览器中运行，便不需要做转换
   }
   useBuiltIns: 'usage', // 当使用 @babel/polyfill 填充一些低版本可以支持的变量或函数，但是这样会使打包文件变大，可以配置这个实现按需加载
 }]]
}
以上配置支持业务代码，如果是写库代码的时候，可以使用以下配置:
options: {
  "plugins": [["@babel/plugin-transform-runtime", {
    "corejs": 2,
    "helpers": true,
    "regenerator": true,
    "useESModules": false
  }]]
}
因为 @babel/polyfill 会污染全局环境，但是 @babel/plugin-transform-runtime 会以闭包的形式去注入，不会污染全局环境
在配置 babel 时，会发现 options 的配置项会非常多，所以可以把 options 的配置项写在 .babelrc 文件中




3.8--配置 react 代码的打包
options: {
 presets: [
    ['@babel/preset-env', 
      {
        targets: {
          chrome: "67" // 如果是在 chrome 67 版本以上的浏览器中运行，便不需要做转换
        }
        useBuiltIns: 'usage', // 当使用 @babel/polyfill 填充一些低版本可以支持的变量或函数，但是这样会使打包文件变大，可以配置这个实现按需加载
      }
    ],
    '@babel/preset-react' // 可以转换 react 的语法
  ]
}
presets 执行顺序是从下往上， 从右往左的








